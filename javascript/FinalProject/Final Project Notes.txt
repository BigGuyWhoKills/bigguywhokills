http://universe.tc.uvu.edu/cs2550/project/project.html
Here is the score summary for the project:
10	Documentation explaining how you implemented your game and how it satisfies the remainder of the requirements. The documentation should be in a file named documentation.html, with a link to the documentation file on the project description page.
20	Game grid that uses CSS and is generated by JavaScript
20	User input in the form of text, select options, and/or buttons
20	User input in the form of mouse clicks
20	Dynamic modification of HTML using innerHTML or DOM functions
20	Use of XMLHttpRequest to load JSON or XML game data that is displayed on the grid page
20	Incorporates HTML 5 audio tags, video tags, canvas, or local storage
120	Game logic code
250	TOTAL


The expense tracker allows the user to define any number of categories of expenses. Each category has a name and a budgeted amount. The display includes a button that the user can click to add a new category and a button to add a new expense item.

Each expense item has a category, an amount, a date, a form of payment (check, credit card, cash, etc.), and a description. When the user creates a new expense item, the program displays the expense item in the proper category, with expenses in the same category sorted by date.

The heading for each category tells the name of the category, the budgeted amount, the total of all current expenses in the category, and the difference between the total and the budgeted amount.

The table row for each expense item includes a button that can be clicked to delete that item. The expense tracker should be initialized with sample data so that it's easy to determine whether it has all of the required functionality.


Category (old):
-Name
-Budgeted Amount
-Total
-Net

Category (new):
-Name
-Budgeted Amount
-Total Spent (calculated from individual expense items)
-Net (calculated from category budgeted and spent)
-Loaded from JSON into categoryArray[]
-Loaded from categoryArray[] into the table with ID categoryHTML

Expense Item:
-Category (must be visually sorted into the correct Category)
-Description/Name
-Amount/Cost
-Date (expense items within each category should be sorted by date)
-Form Of Payment (cash, credit, check)
-Notes
-Button to delete that expense item
-Loaded from JSON into expenseArray[]
-Loaded from expenseArray[] into the table with ID expenseHTML

Optional:
-Button to save the entire state of the DB into localStorage. -DONE!
-Button to restore the last save into active memory. -DONE!
-Timestamp of the last DB save.
-Button to download the DB (as a JSON file) to the client machine.
-Bold the "Total" row.

To do:
Make the expense table category column a "Select" drop-down list.



When the browser claims "xy is not a function", make sure no element uses the same ID as that function.

categoryArray = [];			// This is an array to hold categoryItem objects.  This must NOT have duplicates.  It is being made global for persistence reasons.
buildCategoryTable()
expenseArray = [];			// This is an array to hold expenseItem objects.  This may have duplicates.  It is being made global for persistence reasons.
buildExpenseTable()
sumExpenses() will add all amounts for a given category
function expenseItem( _category, _description, _cost, _date, _type, _notes )


Table background colors:
rgb(132, 151, 176)
rgb(172, 185, 202)
rgb(214, 220, 228)


<table>
	<tr>
		<th>Month</th>
		<th>Savings</th>
		<th>Savings for holiday!</th>
	</tr>
	<tr>
		<td>January</td>
		<td>$100</td>
		<td rowspan="2">$50</td>
	</tr>
	<tr>
		<td>February</td>
		<td>$80</td>
	</tr>
</table>

<table>
<thead>
	<tr>
		<th>Month</th>
		<th>Savings</th>
		<th rowspan="3">Savings for holiday!</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>January</td>
		<td>$100</td>
		<td rowspan="0">$100</td>
	</tr>
	<tr>
		<td>February</td>
		<td>$80</td>
	</tr>
</tbody>
</table>
